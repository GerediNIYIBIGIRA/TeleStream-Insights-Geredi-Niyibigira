name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.9'
  SPARK_VERSION: '3.5.0'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: telestream-insights-hub

jobs:
  # ===================== CODE QUALITY =====================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety

      - name: Check formatting with black
        run: black --check processing/ api/ tests/
        continue-on-error: true

      - name: Check imports with isort
        run: isort --check-only processing/ api/ tests/
        continue-on-error: true

      - name: Lint with flake8
        run: flake8 processing/ api/ tests/ --max-line-length=120 --extend-ignore=E203,W503
        continue-on-error: true

      - name: Type check with mypy
        run: mypy processing/ api/ --ignore-missing-imports
        continue-on-error: true

      - name: Security check with bandit
        run: bandit -r processing/ api/ -ll
        continue-on-error: true

      - name: Dependency security check
        run: safety check --json || true
        continue-on-error: true

  # ======================= UNIT TESTS ======================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=processing \
            --cov=api \
            --cov-report=xml:coverage.xml \
            --cov-report=term \
            --junit-xml=test-results.xml \
            -n auto
        continue-on-error: false

      - name: Upload coverage to Codecov
        if: always() && hashFiles('coverage.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            coverage.xml
          if-no-files-found: warn

  # ==================== INTEGRATION TESTS ==================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: telestream
          POSTGRES_PASSWORD: telestream123
          POSTGRES_DB: telestream_dw
        ports: [5432:5432]
        options: >-
          --health-cmd pg_isready --health-interval 10s
          --health-timeout 5s --health-retries 5

      redis:
        image: redis:7-alpine
        ports: [6379:6379]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio

      - name: Setup database
        run: |
          if [ -f tests/fixtures/schema.sql ]; then
            PGPASSWORD=telestream123 psql -h localhost -U telestream -d telestream_dw -f tests/fixtures/schema.sql
          fi

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: telestream
          DB_PASSWORD: telestream123
          DB_NAME: telestream_dw
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration/ -v --junit-xml=integration-results.xml

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-results.xml
          if-no-files-found: warn

  # ==================== DATA QUALITY TESTS =================
  data-quality-tests:
    name: Data Quality Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install great_expectations pandas pyspark

      - name: Run data quality checks
        run: |
          if [ -d great_expectations ]; then
            python - <<'PY'
          from great_expectations.data_context import DataContext
          try:
              ctx = DataContext('./great_expectations')
              result = ctx.run_checkpoint(checkpoint_name='test_checkpoint')
              assert result.success, "Data quality checks failed"
          except Exception as e:
              print(f"Warning: Data quality checks not configured - {e}")
              exit(0)
          PY
          else
            echo "Great Expectations not configured, skipping..."
          fi

  # ====================== SECURITY SCAN ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Trivy file scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Snyk scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # ====================== BUILD DOCKER =====================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            SPARK_VERSION=${{ env.SPARK_VERSION }}

  # ======================== NOTIFY ========================
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan, build-docker]
    if: always()
    steps:
      - name: Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Email Notification
        if: env.EMAIL_USERNAME != '' && env.EMAIL_PASSWORD != ''
        uses: dawidd6/action-send-mail@v3
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CI/CD Pipeline Status: ${{ job.status }}'
          to: data-team@telestream.com
          from: GitHub Actions
          body: |
            Pipeline execution completed with status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}