# # version: '3.8'

# # services:
# #   # Message Broker
# #   kafka:
# #     image: confluentinc/cp-kafka:7.6.0
# #     environment:
# #       KAFKA_BROKER_ID: 1
# #       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
# #       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
# #       KAFKA_PROCESS_ROLES: broker,controller
# #       KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
# #       KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
# #       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
# #       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
# #       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
# #       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
# #       KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
# #       CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
# #     ports:
# #       - "9092:9092"
# #     volumes:
# #       - kafka_data:/var/lib/kafka/data

# #   # Schema Registry
# #   schema-registry:
# #     image: confluentinc/cp-schema-registry:7.6.0
# #     depends_on:
# #       - kafka
# #     environment:
# #       SCHEMA_REGISTRY_HOST_NAME: schema-registry
# #       SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
# #       SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
# #     ports:
# #       - "8081:8081"

# #   # PostgreSQL (Data Warehouse + Airflow metadata)
# #   postgres:
# #     image: postgres:16-alpine
# #     environment:
# #       POSTGRES_USER: telestream
# #       POSTGRES_PASSWORD: telestream123
# #       POSTGRES_DB: telestream_dw
# #     ports:
# #       - "5432:5432"
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data
# #       - ./init-scripts:/docker-entrypoint-initdb.d

# #   # Redis (Caching + Rate Limiting)
# #   redis:
# #     image: redis:7-alpine
# #     ports:
# #       - "6379:6379"
# #     volumes:
# #       - redis_data:/data

# #   # MinIO (S3-compatible Data Lake)
# #   minio:
# #     image: minio/minio:latest
# #     command: server /data --console-address ":9001"
# #     environment:
# #       MINIO_ROOT_USER: minioadmin
# #       MINIO_ROOT_PASSWORD: minioadmin123
# #     ports:
# #       - "9000:9000"
# #       - "9001:9001"
# #     volumes:
# #       - minio_data:/data

# #   # Apache Airflow
# #   airflow-webserver:
# #     build:
# #       context: ./airflow
# #       dockerfile: Dockerfile
# #     depends_on:
# #       - postgres
# #       - redis
# #     environment:
# #       AIRFLOW__CORE__EXECUTOR: CeleryExecutor
# #       AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://telestream:telestream123@postgres/airflow
# #       AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
# #       AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://telestream:telestream123@postgres/airflow
# #       AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
# #       AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
# #       AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
# #       AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
# #       AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
# #     volumes:
# #       - ./dags:/opt/airflow/dags
# #       - ./logs:/opt/airflow/logs
# #       - ./plugins:/opt/airflow/plugins
# #     ports:
# #       - "8080:8080"
# #     command: webserver

# #   airflow-scheduler:
# #     build:
# #       context: ./airflow
# #       dockerfile: Dockerfile
# #     depends_on:
# #       - postgres
# #       - redis
# #     environment:
# #       AIRFLOW__CORE__EXECUTOR: CeleryExecutor
# #       AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://telestream:telestream123@postgres/airflow
# #       AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
# #       AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://telestream:telestream123@postgres/airflow
# #       AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
# #     volumes:
# #       - ./dags:/opt/airflow/dags
# #       - ./logs:/opt/airflow/logs
# #       - ./plugins:/opt/airflow/plugins
# #     command: scheduler

# #   airflow-worker:
# #     build:
# #       context: ./airflow
# #       dockerfile: Dockerfile
# #     depends_on:
# #       - postgres
# #       - redis
# #     environment:
# #       AIRFLOW__CORE__EXECUTOR: CeleryExecutor
# #       AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://telestream:telestream123@postgres/airflow
# #       AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
# #       AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://telestream:telestream123@postgres/airflow
# #       AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
# #     volumes:
# #       - ./dags:/opt/airflow/dags
# #       - ./logs:/opt/airflow/logs
# #       - ./plugins:/opt/airflow/plugins
# #     command: celery worker

# #   # Metabase (Analytics Dashboard)
# #   metabase:
# #     image: metabase/metabase:latest
# #     depends_on:
# #       - postgres
# #     environment:
# #       MB_DB_TYPE: postgres
# #       MB_DB_DBNAME: metabase
# #       MB_DB_PORT: 5432
# #       MB_DB_USER: telestream
# #       MB_DB_PASS: telestream123
# #       MB_DB_HOST: postgres
# #     ports:
# #       - "3000:3000"

# #   # Prometheus (Metrics)
# #   prometheus:
# #     image: prom/prometheus:latest
# #     volumes:
# #       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
# #       - prometheus_data:/prometheus
# #     ports:
# #       - "9090:9090"
# #     command:
# #       - '--config.file=/etc/prometheus/prometheus.yml'
# #       - '--storage.tsdb.path=/prometheus'

# #   # Grafana (Visualization)
# #   grafana:
# #     image: grafana/grafana:latest
# #     depends_on:
# #       - prometheus
# #     environment:
# #       GF_SECURITY_ADMIN_PASSWORD: admin123
# #       GF_INSTALL_PLUGINS: grafana-piechart-panel
# #     ports:
# #       - "3001:3000"
# #     volumes:
# #       - grafana_data:/var/lib/grafana

# # volumes:
# #   kafka_data:
# #   postgres_data:
# #   redis_data:
# #   minio_data:
# #   prometheus_data:
# #   grafana_data:

# # networks:
# #   default:
# #     name: telestream-network


# version: '3.8'

# x-build-args: &build-args
#   DOCKER_BUILDKIT: 0

# services:
#   api:
#     build:
#       context: .
#       dockerfile: Dockerfile


# version: '3.8'

# services:
#   # ============================================
#   # API SERVICE (FastAPI Application)
#   # ============================================
#   api:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: telestream-api
#     depends_on:
#       - postgres
#       - redis
#       - kafka
#     environment:
#       # Database
#       DB_HOST: postgres
#       DB_PORT: 5432
#       DB_NAME: telestream_dw
#       DB_USER: telestream
#       DB_PASSWORD: telestream123
#       # Cache
#       REDIS_URL: redis://redis:6379
#       # Kafka
#       KAFKA_BROKERS: kafka:9092
#       # API
#       API_HOST: 0.0.0.0
#       API_PORT: 8000
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./api:/app/api
#       - ./processing:/app/processing
#       - ./storage:/app/storage
#       - ./data:/app/data
#     restart: unless-stopped
#     networks:
#       - telestream-network
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 40s

#   # Message Broker
#   kafka:
#     image: confluentinc/cp-kafka:7.6.0
#     container_name: telestream-kafka
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#       KAFKA_PROCESS_ROLES: broker,controller
#       KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
#       KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
#       CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
#     ports:
#       - "9092:9092"
#     volumes:
#       - kafka_data:/var/lib/kafka/data
#     networks:
#       - telestream-network

#   # Schema Registry
#   schema-registry:
#     image: confluentinc/cp-schema-registry:7.6.0
#     container_name: telestream-schema-registry
#     depends_on:
#       - kafka
#     environment:
#       SCHEMA_REGISTRY_HOST_NAME: schema-registry
#       SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
#       SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#     ports:
#       - "8081:8081"
#     networks:
#       - telestream-network

#   # PostgreSQL (Data Warehouse + Airflow metadata)
#   postgres:
#     image: postgres:16-alpine
#     container_name: telestream-postgres
#     environment:
#       POSTGRES_USER: telestream
#       POSTGRES_PASSWORD: telestream123
#       POSTGRES_DB: telestream_dw
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./storage/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U telestream"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     networks:
#       - telestream-network

#   # Redis (Caching + Rate Limiting)
#   redis:
#     image: redis:7-alpine
#     container_name: telestream-redis
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 3s
#       retries: 5
#     networks:
#       - telestream-network

#   # MinIO (S3-compatible Data Lake)
#   minio:
#     image: minio/minio:latest
#     container_name: telestream-minio
#     command: server /data --console-address ":9001"
#     environment:
#       MINIO_ROOT_USER: minioadmin
#       MINIO_ROOT_PASSWORD: minioadmin123
#     ports:
#       - "9000:9000"
#       - "9001:9001"
#     volumes:
#       - minio_data:/data
#     networks:
#       - telestream-network

#   # Apache Airflow Webserver
#   airflow-webserver:
#     build:
#       context: ./airflow
#       dockerfile: Dockerfile
#     container_name: telestream-airflow-webserver
#     depends_on:
#       - postgres
#       - redis
#     environment:
#       AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#       AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://telestream:telestream123@postgres/airflow
#       AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
#       AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://telestream:telestream123@postgres/airflow
#       AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
#       AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#       AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
#       AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
#       AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
#     volumes:
#       - ./dags:/opt/airflow/dags
#       - ./logs:/opt/airflow/logs
#       - ./plugins:/opt/airflow/plugins
#     ports:
#       - "8080:8080"
#     command: webserver
#     networks:
#       - telestream-network

#   # Apache Airflow Scheduler
#   airflow-scheduler:
#     build:
#       context: ./airflow
#       dockerfile: Dockerfile
#     container_name: telestream-airflow-scheduler
#     depends_on:
#       - postgres
#       - redis
#     environment:
#       AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#       AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://telestream:telestream123@postgres/airflow
#       AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
#       AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://telestream:telestream123@postgres/airflow
#       AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
#     volumes:
#       - ./dags:/opt/airflow/dags
#       - ./logs:/opt/airflow/logs
#       - ./plugins:/opt/airflow/plugins
#     command: scheduler
#     networks:
#       - telestream-network

#   # Apache Airflow Worker
#   airflow-worker:
#     build:
#       context: ./airflow
#       dockerfile: Dockerfile
#     container_name: telestream-airflow-worker
#     depends_on:
#       - postgres
#       - redis
#     environment:
#       AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#       AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://telestream:telestream123@postgres/airflow
#       AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
#       AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://telestream:telestream123@postgres/airflow
#       AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq1y3-2FxPNWSVwRASpahmQ9kQfEr8E='
#     volumes:
#       - ./dags:/opt/airflow/dags
#       - ./logs:/opt/airflow/logs
#       - ./plugins:/opt/airflow/plugins
#     command: celery worker
#     networks:
#       - telestream-network

#   # Metabase (Analytics Dashboard)
#   metabase:
#     image: metabase/metabase:latest
#     container_name: telestream-metabase
#     depends_on:
#       - postgres
#     environment:
#       MB_DB_TYPE: postgres
#       MB_DB_DBNAME: metabase
#       MB_DB_PORT: 5432
#       MB_DB_USER: telestream
#       MB_DB_PASS: telestream123
#       MB_DB_HOST: postgres
#     ports:
#       - "3000:3000"
#     networks:
#       - telestream-network

#   # Prometheus (Metrics)
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: telestream-prometheus
#     volumes:
#       - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
#       - prometheus_data:/prometheus
#     ports:
#       - "9090:9090"
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'
#       - '--storage.tsdb.path=/prometheus'
#     networks:
#       - telestream-network

#   # Grafana (Visualization)
#   grafana:
#     image: grafana/grafana:latest
#     container_name: telestream-grafana
#     depends_on:
#       - prometheus
#     environment:
#       GF_SECURITY_ADMIN_PASSWORD: admin123
#       GF_INSTALL_PLUGINS: grafana-piechart-panel
#     ports:
#       - "3001:3000"
#     volumes:
#       - grafana_data:/var/lib/grafana
#     networks:
#       - telestream-network

# volumes:
#   kafka_data:
#   postgres_data:
#   redis_data:
#   minio_data:
#   prometheus_data:
#   grafana_data:

# networks:
#   telestream-network:
#     driver: bridge



version: '3.8'

services:
  # ============================================
  # API SERVICE - No build required!
  # ============================================
  api:
    image: python:3.10-slim
    container_name: telestream-api
    working_dir: /app
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: telestream_dw
      DB_USER: telestream
      DB_PASSWORD: telestream123
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    command: >
      bash -c "
        echo '🚀 Installing dependencies...' &&
        pip install --quiet --no-cache-dir \
          fastapi==0.104.1 \
          uvicorn[standard]==0.24.0 \
          asyncpg==0.29.0 \
          redis==5.0.1 \
          pydantic==2.5.0 \
          python-jose[cryptography]==3.3.0 \
          passlib[bcrypt]==1.7.4 \
          pydantic-settings==2.1.0 &&
        echo '✅ Starting API server...' &&
        uvicorn api.fastapi_server:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - telestream-network
    restart: unless-stopped

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: telestream-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - telestream-network

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: telestream-postgres
    environment:
      POSTGRES_USER: telestream
      POSTGRES_PASSWORD: telestream123
      POSTGRES_DB: telestream_dw
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./storage/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telestream"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - telestream-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: telestream-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - telestream-network

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: telestream-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - telestream-network

  # Metabase
  metabase:
    image: metabase/metabase:latest
    container_name: telestream-metabase
    depends_on:
      - postgres
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: telestream
      MB_DB_PASS: telestream123
      MB_DB_HOST: postgres
    ports:
      - "3000:3000"
    networks:
      - telestream-network

volumes:
  kafka_data:
  postgres_data:
  redis_data:
  minio_data:

networks:
  telestream-network:
    driver: bridge